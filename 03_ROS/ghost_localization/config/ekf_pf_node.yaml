# If you are using the sweve model and you are tuning the k1-9 parameters,
# the swerve model plugin has its own duplicate (11_Robots/ghost_over_under/config/ros_config.yaml) of the k1-9 parameters that must
# be changed as well as this file. TODO: make a class for this
ekf_pf_node:
  ros__parameters:
    particle_filter:
      world_frame: "map"
      rviz_set_pose_topic: "/set_pose"
      map: "./03_ROS/ghost_localization/maps/VEXField.txt"

      # Initial position
      init_x: 0.0
      init_y: 0.0
      init_r: 0.0

      # Initial cloud distribution
      init_x_sigma: 0.1 #
      init_y_sigma: 0.1 #
      init_r_sigma: 0.25 #

      # When you need to tune standard deviations, remember that 99% of values fall within 3 standard deviations
      # EX. Robot travels 1m. 99% of the time that will be accurate within 0.3m. sigma = 0.3/3 = 0.1
      # You can tune this up and down based on performance, but I recommend starting from some initial guess based on robot config or data

      # Robot Constants
      laser_offset: -0.209
      laser_angle_offset: 1.179166718

      # RPLidar A1 datasheet
      range_min: 0.15
      range_max: 5.0
      sigma_observation: 0.1 # Prof recommends 0.15-0.2 based on sensor specs

      # Motion Model Params
      # These calculate odometry standard deviations. X is forward, Y is left on robot.
      # Primary components are k1, k5, k9, which relate x travel to x error, y travel to y error, theta -> theta error.

      # Other values couple unrelated motions. These should be much smaller (and remember to account for units!)
      # EX. Y error from X Motion should be very small, but maybe the robot drifts slightly sideways as it tries to drive straight.

      # Remember that LIDAR will correct periodically, so these can be a bit generous.
      # Too generous though, and you are either losing resolution or wasting computation.

      k1: 0.05 # x error from x motion         # 50% error in primary direction
      k2: 0.05 # x error from y motion         # Assume 10% drift via steering errors (hard to drive straight w swerve)
      k3: 0.1 # x error from rotation         # Pure rotation should be causing very little motion, 99% within 5" for 360°

      k4: 0.05 # y error from x motion         # Assume 10% drift via steering errors (hard to drive straight w swerve)
      k5: 0.5 # y error from y motion         # 50% error in primary direction
      k6: 0.1 # y error from rotation         # Pure rotation should be causing very little motion, 99% within 5" for 360°

      k7: 0.2 # theta error from x motion     # After 2ft of travel, 99% are within by 5°
      k8: 0.2 # theta error from y motion     # After 2ft of travel, 99% are within by 5°
      k9: 1.5 # theta error from rotation     # 50% error in primary direction

      # Dont perform LIDAR updates unless we move a certain distance or angle.
      min_update_dist: 0.05
      min_update_angle: 0.005

      # Computation Factors
      num_particles: 200 # Increase until computation runs out
      resize_factor: 10.0 # num_points / resize_factor = num_rays
      resample_frequency: 1 # Resamples per update cycle (Requires experimental tuning). Lower value will resample more often and tighten cloud distribution.

      # Statistical gain for lidar scan confidence (Requires experimental tuning)
      # Technically speaking, this is the statisical correlation between all the scans of the lidar. They aren't independent, because many scans
      # may hit the same object. They also aren't totally dependent because there are sharp discontinuities between different objects.
      # Max is gamma = 1,  all lidar rays are totally uncorrelated. Minimum is gamma = 1/n means they are perfectly correlated.

      # In practice, this is a tunable param which will increase or decrease overall LIDAR confidence.
      # One good way to tune is to look at how different the particle weights are from each other.
      # Decreasing gamma should decrease confidence in lidar observation and weight particles less harshly, IIRC?
      gamma: 0.09

      # Limits maximum penalty for a bad laser scan
      # Increasing these makes it harsher on short/long errors for scan
      # Short scans are very common for other robots and dynamic obstacles
      # Long scans are extremely unlikely for comp (you see through walls?). Doorways make this viable in buildings and when glass is present.
      dist_short: 0.24 # 1 std from sensor 68.2%
      dist_long: 0.28 # 2 std from sensor 95%

      # Some robots can't place a LIDAR with 360° view. These parameters allow you to permanently ignore the obscured range of the scan.
      use_skip_range: true
      skip_index_min: 1
      skip_index_max: 2

      # use_sim_time: true
