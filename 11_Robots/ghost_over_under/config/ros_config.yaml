ghost_serial_node:
  ros__parameters:
    port_name: "/dev/ttyACM1"
    backup_port_name: "/dev/ttyACM2"
    verbose: false

imu_filter_node:
  ros__parameters:
    input_imu_topic: /sensors/imu
    output_imu_topic: /estimation/imu/filtered
    calculate_bias: false
    calculate_covariance: false
    calibration_time: 5.0
    sensor_frequency: 100.0

    accel_bias_x: 0.0409958
    accel_bias_y: 0.991383
    accel_bias_z: 0.032677

    gyro_bias_x: -0.0050632
    gyro_bias_y: 0.00207869
    gyro_bias_z: -0.000868592

    accel_covariance: [
      1.64868e-06, 1.95563e-07, 8.17889e-08,
      1.95563e-07, 5.70874e-06, 5.11217e-08,
      8.17889e-08, 5.11217e-08, 1.22049e-06]

    gyro_covariance: [
      4.09332e-06,  1.38296e-06, -2.18034e-07,
      1.38296e-06,  1.59246e-05, -4.90858e-07,
      -2.18034e-07, -4.90858e-07,  2.57037e-06]

    camera_roll: -90.0
    camera_pitch: 0.0
    camera_yaw: -90.0

bag_recorder_service:
  ros__parameters:
    disk_space_required_kb: 256000
    disk_check_period_s: 10

covariance_2d_publisher:
  ros__parameters:
    input_topic_names:
    - /odometry/filtered

competition_state_machine_node:
  ros__parameters:
    odom_topic: "/sensors/wheel_odom"
    pose_topic: "/odometry/filtered"

    swerve_robot_plugin:
      # Motion Model Params
      # These calculate odometry standard deviations. X is forward, Y is left on robot.
      # Primary components are k1, k5, k9, which relate x travel to x error, y travel to y error, theta -> theta error.

      # Other values couple unrelated motions. These should be much smaller (and remember to account for units!)
      # EX. Y error from X Motion should be very small, but maybe the robot drifts slightly sideways as it tries to drive straight.

      # Remember that LIDAR will correct periodically, so these can be a bit generous.
      # Too generous though, and you are either losing resolution or wasting computation.

      # MAKE SURE THESE MATCH IN THE PARTICLE FILTER
      k1: 0.5   # x error from x motion         # 50% error in primary direction
      k2: 0.05   # x error from y motion         # Assume 10% drift via steering errors (hard to drive straight w swerve)       
      k3: 0.1 # x error from rotation         # Pure rotation should be causing very little motion, 99% within 5" for 360°

      k4: 0.05   # y error from x motion         # Assume 10% drift via steering errors (hard to drive straight w swerve)  
      k5: 0.5   # y error from y motion         # 50% error in primary direction           
      k6: 0.1 # y error from rotation         # Pure rotation should be causing very little motion, 99% within 5" for 360°
      
      k7: 0.2  # theta error from x motion     # After 2ft of travel, 99% are within by 5°   
      k8: 0.2  # theta error from y motion     # After 2ft of travel, 99% are within by 5° 
      k9: 1.0   # theta error from rotation     # 50% error in primary direction  

      # motion planning
      move_to_pose_kp_xy: 1.0
      move_to_pose_kp_theta: 2.0

      # Steering Controller
      steering_kp: 1.75
      steering_kd: 0.0
      steering_ki: 0.0
      steering_ki_limit: 0.0
      steering_control_deadzone: 0.0 # Degrees

      controller_dt: 0.01 # 100 Hz
      angle_control_kp: 0.75
      velocity_scaling_ratio: 1.0
      velocity_scaling_threshold: 0.2

      joy_angle_control_threshold: 0.5

      lift_gear_ratio: 30.

      lift_up_angle_deg: -90.
      lift_climbed_angle_deg: -150.
      # degree per second of actual lift
      lift_kP: .05
      lift_speed: -10. #TODO

      # TODO MAXX ALL OF THESE
      stick_gear_ratio: 3.
      # 0 is the position we start on, slightly crooked
      stick_upright_angle_deg: 55.
      # in degrees
      stick_angle_normal: 130.
      stick_angle_skills: 10. # not an array because there are exactly 2 items
      stick_angle_soft_limit_offset: 5.
      # switch directions at angle_min + offset or angle_max - offset

      max_wheel_actuator_vel: 725.0
      max_ang_vel_slew: 1.0 # 0.0 <-> 1.0
      max_lin_vel_slew: 1.0 # 0.0 <-> 1.0

# If you are using the sweve model and you are tuning the k1-9 parameters,
# the swerve model plugin has its own duplicate (11_Robots/ghost_over_under/config/ros_config.yaml) of the k1-9 parameters that must
# be changed as well as this file. TODO: make a class for this
ekf_pf_node:
  ros__parameters:
    particle_filter:
      world_frame: "map"
      rviz_set_pose_topic: "/set_pose"
      map: "/home/ghost2/VEXU_GHOST/03_ROS/ghost_localization/maps/VEXField.txt"

      # map: "./VEXU_GHOST/03_ROS/ghost_localization/maps/VEXField.txt"

      # Initial position
      init_x: 0.0
      init_y: 0.0
      init_r: 0.0

      # Initial cloud distribution
      init_x_sigma: 0.1         #
      init_y_sigma: 0.1         #
      init_r_sigma: 0.25        #

      # When you need to tune standard deviations, remember that 99% of values fall within 3 standard deviations
      # EX. Robot travels 1m. 99% of the time that will be accurate within 0.3m. sigma = 0.3/3 = 0.1
      # You can tune this up and down based on performance, but I recommend starting from some initial guess based on robot config or data

      # Robot Constants
      laser_offset: -0.209
      laser_angle_offset: 1.179166718
      
      # RPLidar A1 datasheet
      range_min: 0.15
      range_max: 5.0
      sigma_observation: 0.1 # Prof recommends 0.15-0.2 based on sensor specs

      # Motion Model Params
      # These calculate odometry standard deviations. X is forward, Y is left on robot.
      # Primary components are k1, k5, k9, which relate x travel to x error, y travel to y error, theta -> theta error.
      
      # Other values couple unrelated motions. These should be much smaller (and remember to account for units!)
      # EX. Y error from X Motion should be very small, but maybe the robot drifts slightly sideways as it tries to drive straight.

      # Remember that LIDAR will correct periodically, so these can be a bit generous.
      # Too generous though, and you are either losing resolution or wasting computation.

      # MAKE SURE THESE MATCH IN THE SWERVE MODEL
      k1: 0.5   # x error from x motion         # 50% error in primary direction
      k2: 0.05   # x error from y motion         # Assume 10% drift via steering errors (hard to drive straight w swerve)       
      k3: 0.1 # x error from rotation         # Pure rotation should be causing very little motion, 99% within 5" for 360°

      k4: 0.05   # y error from x motion         # Assume 10% drift via steering errors (hard to drive straight w swerve)  
      k5: 0.5   # y error from y motion         # 50% error in primary direction           
      k6: 0.1 # y error from rotation         # Pure rotation should be causing very little motion, 99% within 5" for 360°
      
      k7: 0.2  # theta error from x motion     # After 2ft of travel, 99% are within by 5°   
      k8: 0.2  # theta error from y motion     # After 2ft of travel, 99% are within by 5° 
      k9: 1.5   # theta error from rotation     # 50% error in primary direction  

      # Dont perform LIDAR updates unless we move a certain distance or angle.
      min_update_dist:  0.05
      min_update_angle: 0.005

      # Computation Factors
      num_particles: 200        # Increase until computation runs out
      resize_factor: 10.0       # num_points / resize_factor = num_rays
      resample_frequency: 4     # Resamples per update cycle (Requires experimental tuning). Lower value will resample more often and tighten cloud distribution.

      # Statistical gain for lidar scan confidence (Requires experimental tuning)
      # Technically speaking, this is the statisical correlation between all the scans of the lidar. They aren't independent, because many scans
      # may hit the same object. They also aren't totally dependent because there are sharp discontinuities between different objects.
      # Max is gamma = 1,  all lidar rays are totally uncorrelated. Minimum is gamma = 1/n means they are perfectly correlated.

      # In practice, this is a tunable param which will increase or decrease overall LIDAR confidence.
      # One good way to tune is to look at how different the particle weights are from each other. 
      # Decreasing gamma should decrease confidence in lidar observation and weight particles less harshly, IIRC?
      gamma: 0.09

      # Limits maximum penalty for a bad laser scan
      # Increasing these makes it harsher on short/long errors for scan
      # Short scans are very common for other robots and dynamic obstacles
      # Long scans are extremely unlikely for comp (you see through walls?). Doorways make this viable in buildings and when glass is present.
      dist_short: 0.24          # 1 std from sensor 68.2%
      dist_long: 0.28           # 2 std from sensor 95%

      # Some robots can't place a LIDAR with 360° view. These parameters allow you to permanently ignore the obscured range of the scan.
      use_skip_range: true
      skip_index_min: 1
      skip_index_max: 2

      use_sim_time: false

ekf_localization_node:
  ros__parameters:
    # Needs to be specified to accomodate time difference between running bags and running hardware
    # See: https://answers.ros.org/question/362875/set_pose-breaks-robot_localization
    # set_pose_time_topc: "/set_pose"

    initial_state: [1.524,  0.3048,  0.0,
                  0.0,     0.0,  0.0,
                  0.0,     0.0,  0.0,
                  0.0,     0.0,  0.0,
                  0.0,     0.0,  0.0]

    # The frequency, in Hz, at which the filter will output a position estimate. Note that the filter will not begin
    # computation until it receives at least one message from one of the inputs. It will then run continuously at the
    # frequency specified here, regardless of whether it receives more measurements. Defaults to 30 if unspecified.
    frequency: 30.0

    # The period, in seconds, after which we consider a sensor to have timed out. In this event, we carry out a predict
    # cycle on the EKF without correcting it. This parameter can be thought of as the minimum frequency with which the
    # filter will generate new output. Defaults to 1 / frequency if not specified.
    sensor_timeout: 0.1

    # ekf_localization_node and ukf_localization_node both use a 3D omnidirectional motion model. If this parameter is
    # set to true, no 3D information will be used in your state estimate. Use this if you are operating in a planar
    # environment and want to ignore the effect of small variations in the ground plane that might otherwise be detected
    # by, for example, an IMU. Defaults to false if unspecified.
    two_d_mode: true

    # Use this parameter to provide an offset to the transform generated by ekf_localization_node. This can be used for
    # future dating the transform, which is required for interaction with some other packages. Defaults to 0.0 if
    # unspecified.
    transform_time_offset: 0.0

    # Use this parameter to provide specify how long the tf listener should wait for a transform to become available.
    # Defaults to 0.0 if unspecified.
    transform_timeout: 0.0

    # If you're having trouble, try setting this to true, and then echo the /diagnostics_agg topic to see if the node is
    # unhappy with any settings or data.
    print_diagnostics: true

    # Debug settings. Not for the faint of heart. Outputs a ludicrous amount of information to the file specified by
    # debug_out_file. I hope you like matrices! Please note that setting this to true will have strongly deleterious
    # effects on the performance of the node. Defaults to false if unspecified.
    debug: false

    # Defaults to "robot_localization_debug.txt" if unspecified. Please specify the full path.
    debug_out_file: ~/VEXU_GHOST/03_ROS/ghost_ros_interfaces/robot_localization_debug.txt

    use_sim_time: false
    # REP-105 (http://www.ros.org/reps/rep-0105.html) specifies four principal coordinate frames: base_link, odom, map, and
    # earth. base_link is the coordinate frame that is affixed to the robot. Both odom and map are world-fixed frames.
    # The robot's position in the odom frame will drift over time, but is accurate in the short term and should be
    # continuous. The odom frame is therefore the best frame for executing local motion plans. The map frame, like the odom
    # frame, is a world-fixed coordinate frame, and while it contains the most globally accurate position estimate for your
    # robot, it is subject to discrete jumps, e.g., due to the fusion of GPS data or a correction from a map-based
    # localization node. The earth frame is used to relate multiple map frames by giving them a common reference frame.
    # ekf_localization_node and ukf_localization_node are not concerned with the earth frame.
    # Here is how to use the following settings:
    # 1. Set the map_frame, odom_frame, and base_link frames to the appropriate frame names for your system.
    #     1a. If your system does not have a map_frame, just remove it, and make sure "world_frame" is set to the value of
    #         odom_frame.
    # 2. If you are fusing continuous position data such as wheel encoder odometry, visual odometry, or IMU data, set
    #   "world_frame" to your odom_frame value. This is the default behavior for robot_localization's state estimation nodes.
    # 3. If you are fusing global absolute position data that is subject to discrete jumps (e.g., GPS or position updates
    # from landmark observations) then:
    #     3a. Set your "world_frame" to your map_frame value
    #     3b. MAKE SURE something else is generating the odom->base_link transform. Note that this can even be another state
    #         estimation node from robot_localization! However, that instance should *not* fuse the global data.
    # map_frame: map              # Defaults to "map" if unspecified
    odom_frame: odom              # Defaults to "odom" if unspecified
    base_link_frame: base_link    # Defaults to "base_link" if unspecified
    world_frame: odom             # Defaults to the value of odom_frame if unspecified

    # The filter accepts an arbitrary number of inputs from each input message type (nav_msgs/Odometry,
    # geometry_msgs/PoseWithCovarianceStamped, geometry_msgs/TwistWithCovarianceStamped,
    # sensor_msgs/Imu). To add an input, simply append the next number in the sequence to its "base" name, e.g., odom0,
    # odom1, twist0, twist1, imu0, imu1, imu2, etc. The value should be the topic name. These parameters obviously have no
    # default values, and must be specified.
    odom0: /sensors/wheel_odom

    # Each sensor reading updates some or all of the filter's state. These options give you greater control over which
    # values from each measurement are fed to the filter. For example, if you have an odometry message as input, but only
    # want to use its Z position value, then set the entire vector to false, except for the third entry. The order of the
    # values is x, y, z, roll, pitch, yaw, vx, vy, vz, vroll, vpitch, vyaw, ax, ay, az. Note that not some message types
    # do not provide some of the state variables estimated by the filter. For example, a TwistWithCovarianceStamped message
    # has no pose information, so the first six values would be meaningless in that case. Each vector defaults to all false
    # if unspecified, effectively making this parameter required for each sensor.
    odom0_config: [true, true,  false,
                  false, false, true,
                  false, false, false,
                  false, false, false,
                  false, false, false]

    # If you have high-frequency data or are running with a low frequency parameter value, then you may want to increase
    # the size of the subscription queue so that more measurements are fused.
    odom0_queue_size: 5

    # [ADVANCED] Large messages in ROS can exhibit strange behavior when they arrive at a high frequency. This is a result
    # of Nagle's algorithm. This option tells the ROS subscriber to use the tcpNoDelay option, which disables Nagle's
    # algorithm.
    odom0_nodelay: true

    # [ADVANCED] When measuring one pose variable with two sensors, a situation can arise in which both sensors under-
    # report their covariances. This can lead to the filter rapidly jumping back and forth between each measurement as they
    # arrive. In these cases, it often makes sense to (a) correct the measurement covariances, or (b) if velocity is also
    # measured by one of the sensors, let one sensor measure pose, and the other velocity. However, doing (a) or (b) isn't
    # always feasible, and so we expose the differential parameter. When differential mode is enabled, all absolute pose
    # data is converted to velocity data by differentiating the absolute pose measurements. These velocities are then
    # integrated as usual. NOTE: this only applies to sensors that provide pose measurements; setting differential to true
    # for twist measurements has no effect.
    odom0_differential: false

    # [ADVANCED] When the node starts, if this parameter is true, then the first measurement is treated as a "zero point"
    # for all future measurements. While you can achieve the same effect with the differential paremeter, the key
    # difference is that the relative parameter doesn't cause the measurement to be converted to a velocity before
    # integrating it. If you simply want your measurements to start at 0 for a given sensor, set this to true.
    odom0_relative: false

    # [ADVANCED] If your data is subject to outliers, use these threshold settings, expressed as Mahalanobis distances, to
    # control how far away from the current vehicle state a sensor measurement is permitted to be. Each defaults to
    # numeric_limits<double>::max() if unspecified. It is strongly recommended that these parameters be removed if not
    # required. Data is specified at the level of pose and twist variables, rather than for each variable in isolation.
    # For messages that have both pose and twist data, the parameter specifies to which part of the message we are applying
    # the thresholds.
    #odom0_pose_rejection_threshold: 5
    #odom0_twist_rejection_threshold: 1

    imu0: /estimation/imu/filtered
    imu0_config: [false, false, false,
                  false,  false,  false,
                  false, false, false,
                  true,  true,  true,
                  true,  true,  false]
    imu0_differential: false
    imu0_relative: true
    imu0_queue_size: 5
    imu0_pose_rejection_threshold: 0.8                 # Note the difference in parameter names
    imu0_twist_rejection_threshold: 0.8                #
    imu0_linear_acceleration_rejection_threshold: 0.8  #

    # [ADVANCED] Some IMUs automatically remove acceleration due to gravity, and others don't. If yours doesn't, please set
    # this to true, and *make sure* your data conforms to REP-103, specifically, that the data is in ENU frame.
    imu0_remove_gravitational_acceleration: false

    # [ADVANCED]  The EKF and UKF models follow a standard predict/correct cycle. During prediction, if there is no
    # acceleration reference, the velocity at time t+1 is simply predicted to be the same as the velocity at time t. During
    # correction, this predicted value is fused with the measured value to produce the new velocity estimate. This can be
    # problematic, as the final velocity will effectively be a weighted average of the old velocity and the new one. When
    # this velocity is the integrated into a new pose, the result can be sluggish covergence. This effect is especially
    # noticeable with LIDAR data during rotations. To get around it, users can try inflating the process_noise_covariance
    # for the velocity variable in question, or decrease the  variance of the variable in question in the measurement
    # itself. In addition, users can also take advantage of the control command being issued to the robot at the time we
    # make the prediction. If control is used, it will get converted into an acceleration term, which will be used during
    # predicition. Note that if an acceleration measurement for the variable in question is available from one of the
    # inputs, the control term will be ignored.
    # Whether or not we use the control input during predicition. Defaults to false.
    use_control: false
    # Whether the input (assumed to be cmd_vel) is a geometry_msgs/Twist or geometry_msgs/TwistStamped message. Defaults to
    # false.
    stamped_control: false
    # The last issued control command will be used in prediction for this period. Defaults to 0.2.
    control_timeout: 0.2
    # Which velocities are being controlled. Order is vx, vy, vz, vroll, vpitch, vyaw.
    control_config: [true, false, false, false, false, false]
    # Places limits on how large the acceleration term will be. Should match your robot's kinematics.
    # acceleration_limits: [0.15, 0.0, 0.0, 0.0, 0.0, 0.5]
    # Acceleration and deceleration limits are not always the same for robots.
    # deceleration_limits: [0.15, 0.0, 0.0, 0.0, 0.0, 0.5]
    # If your robot cannot instantaneously reach its acceleration limit, the permitted change can be controlled with these
    # gains
    # acceleration_gains: [0.8, 0.0, 0.0, 0.0, 0.0, 0.9]
    # If your robot cannot instantaneously reach its deceleration limit, the permitted change can be controlled with these
    # gains
    # deceleration_gains: [1.0, 0.0, 0.0, 0.0, 0.0, 1.0]

    # [ADVANCED] The process noise covariance matrix can be difficult to tune, and can vary for each application, so it is
    # exposed as a configuration parameter. This matrix represents the noise we add to the total error after each
    # prediction step. The better the omnidirectional motion model matches your system, the smaller these values can be.
    # However, if users find that a given variable is slow to converge, one approach is to increase the
    # process_noise_covariance diagonal value for the variable in question, which will cause the filter's predicted error
    # to be larger, which will cause the filter to trust the incoming measurement more during correction. The values are
    # ordered as x, y, z, roll, pitch, yaw, vx, vy, vz, vroll, vpitch, vyaw, ax, ay, az. Defaults to the matrix below if
    # unspecified.
    process_noise_covariance: [0.5,  0.0,    0.0,    0.0,    0.0,    0.0,    0.0,     0.0,     0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,
                              0.0,    0.1,   0.0,    0.0,    0.0,    0.0,    0.0,     0.0,     0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,
                              0.0,    0.0,    0.06,   0.0,    0.0,    0.0,    0.0,     0.0,     0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,
                              0.0,    0.0,    0.0,    0.03,   0.0,    0.0,    0.0,     0.0,     0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,
                              0.0,    0.0,    0.0,    0.0,    0.03,   0.0,    0.0,     0.0,     0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,
                              0.0,    0.0,    0.0,    0.0,    0.0,    0.5,   0.0,     0.0,     0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,
                              0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.025,   0.0,     0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,
                              0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,     0.025,   0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,
                              0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,     0.0,     0.04,   0.0,    0.0,    0.0,    0.0,    0.0,    0.0,
                              0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,     0.0,     0.0,    0.01,   0.0,    0.0,    0.0,    0.0,    0.0,
                              0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,     0.0,     0.0,    0.0,    0.01,   0.0,    0.0,    0.0,    0.0,
                              0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,     0.0,     0.0,    0.0,    0.0,    0.05,   0.0,    0.0,    0.0,
                              0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,     0.0,     0.0,    0.0,    0.0,    0.0,    0.01,   0.0,    0.0,
                              0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,     0.0,     0.0,    0.0,    0.0,    0.0,    0.0,    0.01,   0.0,
                              0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,     0.0,     0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.015]

    # [ADVANCED] This represents the initial value for the state estimate error covariance matrix. Setting a diagonal
    # value (variance) to a large value will result in rapid convergence for initial measurements of the variable in
    # question. Users should take care not to use large values for variables that will not be measured directly. The values
    # are ordered as x, y, z, roll, pitch, yaw, vx, vy, vz, vroll, vpitch, vyaw, ax, ay, az. Defaults to the matrix below
    #if unspecified.
    initial_estimate_covariance: [1e-5,   0.0,    0.0,    0.0,    0.0,    0.0,    0.0,     0.0,     0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,
                                  0.0,    1e-5,   0.0,    0.0,    0.0,    0.0,    0.0,     0.0,     0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,
                                  0.0,    0.0,    1e-9,   0.0,    0.0,    0.0,    0.0,     0.0,     0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,
                                  0.0,    0.0,    0.0,    1e-9,   0.0,    0.0,    0.0,     0.0,     0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,
                                  0.0,    0.0,    0.0,    0.0,    1e-9,   0.0,    0.0,     0.0,     0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,
                                  0.0,    0.0,    0.0,    0.0,    0.0,    1e-5,   0.0,     0.0,     0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,
                                  0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    1e-5,    0.0,     0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,
                                  0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,     1e-9,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,
                                  0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,     0.0,     1e-9,   0.0,    0.0,    0.0,    0.0,    0.0,    0.0,
                                  0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,     0.0,     0.0,    1e-9,   0.0,    0.0,    0.0,    0.0,    0.0,
                                  0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,     0.0,     0.0,    0.0,    1e-9,   0.0,    0.0,    0.0,    0.0,
                                  0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,     0.0,     0.0,    0.0,    0.0,    1e-9,   0.0,    0.0,    0.0,
                                  0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,     0.0,     0.0,    0.0,    0.0,    0.0,    1e-5,   0.0,    0.0,
                                  0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,     0.0,     0.0,    0.0,    0.0,    0.0,    0.0,    1e-5,   0.0,
                                  0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,     0.0,     0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    1e-9]

      # use_dynamic_process_noise_covariance: true